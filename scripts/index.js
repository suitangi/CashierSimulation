//Helper: shuffle an array
function shuffle(array) {
  for (var i = array.length - 1; i > 0; --i) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}


//random from list
function random(list) {
  return list[randomInt(0, list.length)];
}

//returns random integer between lower (inclusive) and upper (exclusive)
function randomInt(lower, upper) {
  return Math.floor(Math.random() * (upper - lower) + lower);
}

//Helper: check if 2 arrays are the same
function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

//returns a random number generated by a truncated normal distribution
function normal(mean, std, left_trunc, right_trunc) {
  var u = 0,
    v = 0;
  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)
  while (v === 0) v = Math.random();
  let result = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  result *= std;
  result += mean;
  if (result < left_trunc) result = left_trunc;
  if (result > right_trunc) result = right_trunc;
  return result;
}

// Exponential random number generator
// Time until next arrival
//https://gist.github.com/nicolashery/5885280
function randomExponential(rate, randomUniform) {
  // http://en.wikipedia.org/wiki/Exponential_distribution#Generating_exponential_variates
  rate = rate || 1;

  // Allow to pass a random uniform value or function
  // Default to Math.random()
  var U = randomUniform;
  if (typeof randomUniform === 'function') U = randomUniform();
  if (!U) U = Math.random();

  return -Math.log(U)/rate;
}

//Helper: Better rounding
function roundBetter(num, place) {
  let mod = Math.pow(10, place);
  return Math.round(num * mod + Math.sign(num) * 0.1 ** (17 - 2 - (Math.round(num * mod) / mod).toString().length)) / mod;
}

//functions for the prequestions
function preQuestions(qNum) {
  if (qNum == window.expParam.prequestions.length) {
    setTimeout(function() {
      startExp();
    }, 500);
  } else {
    let question = window.expParam.prequestions[qNum],
      html = '',
      keys = ['enter'];
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<input type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" required />' +
        '</div>' +
        '</form>'
    } else if (question.type == 'choice') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
    } else if (question.type == 'specialKey') {
      keys = ['p', 'q'];
      html = question.question;
    }
    $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: keys,
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.preQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                preQuestions(qNum + 1);
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  preQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else {
              preQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
      },
      onOpenBefore: function() {
        if (question.type == 'specialKey') {
          this.buttons.formSubmit.hide();
        }
      }
    });
  }
}

//functions for the prequestions
function postQuestions(qNum) {
  if (qNum == window.expParam.postquestions.length) {
    console.log("Experiment Done");
    //saveData(new Date().getTime() + "" + Math.floor(Math.random() * 10) + ".csv", dataToCSV());
  } else {
    let question = window.expParam.postquestions[qNum],
      html = '';
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<input type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" required />' +
        '</div>' +
        '</form>'
    } else if (question.type == 'choice') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
    } else if (question.type == "number") {
      html = question.question + '<br>' + "<input type=\"number\" id=\"ageInput\" min=\"" + question.min + "\" max=\"" + question.max + "\">";
    } else if (question.type == "ladder") {
      html = question.question + '<br><br>';
      for (var i = 1; i < 10; i++) {
        html += '<select id=\"ladderInput' + i + '\"><option value=\"-1\">Select a choice</option><option value=\"1\">' + (10 - i) + '0% Chance chance of $1.00</option><option value=\"0\">$0.50 for sure</option></select><br><br>';
      }
    }
    $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: ['enter'],
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.postQuestions.push({
                      question: question.title,
                      index: j,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.postQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  postQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else if (question.type == 'number') {
              var textAns = this.$content.find('#ageInput').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'ladder') {
              var ans = true;
              for (var i = 1; i < 10; i++) {
                ans = ans && document.getElementById('ladderInput' + i).value != "-1";
              }
              if (!ans) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please make sure you select answers for all choices.',
                  type: 'red',
                });
                return false;
              } else {
                let prob = []
                for (var i = 1; i < 10; i++) {
                  prob.push(parseInt(document.getElementById('ladderInput' + i).value));
                }
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: prob
                });
                postQuestions(qNum + 1);
              }
            } else {
              postQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
      }
    });
  }
}

function dataToCSV() {
  var csv = "";
  csv += 'Bonus,' + window.bonusAmount + '\n'
  csv += '\nPrequestion,Answer\n'
  for (i = 0; i < window.expData.preQuestions.length; i++) {
    csv += "\"" + window.expData.preQuestions[i].question + '","' +
      window.expData.preQuestions[i].answer + '"\n';
  }
  csv += '\nPostquestion,Answer\n';
  if (window.expData.postQuestions.length == 0) {
    for (i = 0; i < window.expParam.postquestions.length; i++) {
      csv += '"' + window.expParam.postquestions[i].title + '",""\n';
    }
  } else {
    for (i = 0; i < window.expData.postQuestions.length; i++) {
      csv += '"' + window.expData.postQuestions[i].question + '","' +
        window.expData.postQuestions[i].answer + '"\n';
    }
  }

  //record trial data
  csv += 'ValidClickNumber,BlockNumber,MaxTimePerPatch,TotalTimeTask,PatchNumber,PatchSS,CurrentSS,PixelsPerSec,clickX,clickY,TimeInPatch,InterClickTime,PatchClick,Target?,';
  csv += 'sName,sNum,Points,TotalPoints,ElapsedTimeOnTask,TcurrentCt1,TcurrentCt2,TcurrentCt3,TcurrentCt4,Tname1,Tnumber1,Tpct1,TPoints1,TpointProb1,';
  csv += 'Tname2,Tnumber2,Tpct2,TPoints2,TpointProb2,Tname3,Tnumber3,Tpct3,TPoints3,TpointProb3,Tname4,Tnumber4,Tpct4,TPoints4,TpointProb4\n';
  for (var i = 0; i < window.trialData.length; i++) {
    csv += window.trialData[i].ValidClickNumber + "," + window.trialData[i].BlockNumber + "," + window.trialData[i].MaxTimePerPatch + "," + window.trialData[i].TotalTimeTask + "," + window.trialData[i].patchNum + "," + window.trialData[i].patchSS + "," + window.trialData[i].currentSS + "," + window.trialData[i].pixelsPerSec + "," + window.trialData[i].clickx + "," + window.trialData[i].clicky + "," + window.trialData[i].TimeInPatch + "," + window.trialData[i].InterClickTime + "," + window.trialData[i].PatchClick + "," + window.trialData[i].Target + "," + window.trialData[i].Clickname + "," + window.trialData[i].Clicknum + "," + window.trialData[i].Points + "," + window.trialData[i].TotalPoints + "," + window.trialData[i].ElapsedTimeOnTask + "," + window.trialData[i].TcurrentCt1 + "," + window.trialData[i].TcurrentCt2 + "," + window.trialData[i].TcurrentCt3 + "," + window.trialData[i].TcurrentCt4 + "," + window.trialData[i].Tname1 + "," + window.trialData[i].Tnumber1 + "," + window.trialData[i].Tpct1 + "," + window.trialData[i].TPoints1 + "," + window.trialData[i].TpointProb1 + "," + window.trialData[i].Tname2 + "," + window.trialData[i].Tnumber2 + "," + window.trialData[i].Tpct2 + "," + window.trialData[i].TPoints2 + "," + window.trialData[i].TpointProb2 + "," + window.trialData[i].Tname3 + "," + window.trialData[i].Tnumber3 + "," + window.trialData[i].Tpct3 + "," + window.trialData[i].TPoints3 + "," + window.trialData[i].TpointProb3 + "," + window.trialData[i].Tname4 + "," + window.trialData[i].Tnumber4 + "," + window.trialData[i].Tpct4 + "," + window.trialData[i].TPoints4 + "," + window.trialData[i].TpointProb4 + '\n';
  }
  return csv;
}

//function partial save
function saveData(filename, filedata) {
  $.ajax({
    type: 'post',
    cache: false,
    url: './save_data.php', // this is the path to the PHP script
    data: {
      filename: filename,
      filedata: filedata
    },
    success: function(msg) {
      $.confirm({
        title: window.expParam.confirm_popup.title,
        content: window.expParam.confirm_popup.content,
        type: 'blue',
        boxWidth: '55%',
        useBootstrap: false,
        typeAnimated: true,
        buttons: {
          close: {
            text: "Close",
            btnClass: 'btn-blue',
            action: function() {
              return false;
            }
          }
        },
        onOpenBefore: function() {
          // before the modal is displayed.
          this.buttons.close.hide();
        },
      });
      console.log('Data saved');
    },
    error: function(jqXhr, textStatus, errorThrown) {
      console.log(errorThrown);
    }
  });
}

function getNum(lower, upper) {
  return roundBetter(lower + (Math.random() * (upper - lower)), 2);
}

function feedback() {

}

function newCust(dest) {
  var c = new customer(0, window.cashiers.amount * 27, dest);
  window.customers.list.push(c);
  return c;
}

function cQueue() {
  this.x = 0;


  this.drawQ = function() {
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    this.y = window.cashiers.amount * 27;
    this.image = new Image(50, 50);
    this.image.width = 50;
    this.image.height = 50;
    this.image.src = './img/person3.png';
    if (window.customerQueue > 0)
      ctx.drawImage(this.image, this.x - 25, this.y - 25);
  }
}

function customer(x, y, dest) {
  this.sx = x;
  this.sy = y;
  this.x = x;
  this.y = y;
  this.dest = dest;
  this.destX = window.expParam.customerWalkAreaWidth - 27;
  this.destY = dest * 54 + 27;
  this.lifeTime = window.expParam.customerTravelTime * 1000;
  this.arrival = false;
  shuffle(window.expParam.customerImages);
  this.imgSrc = window.expParam.customerImages[0];

  this.drawCust = function() {
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    this.image = new Image(50, 50);
    this.image.width = 50;
    this.image.height = 50;
    this.image.src = this.imgSrc;
    ctx.drawImage(this.image, this.x - 25, this.y - 25);
  }
  this.moveCust = function (time) {
    if (this.arrival || this.lifeTime <= 0) { //arrived but haven't triggered
      if (!this.arrival) { //trigger
        this.arrival = true;
        this.x = this.destX;
        this.y = this.destY;

        if (this.dest != window.cashiers.number) {
          setTimeout(function(initialD) {
            removeCust(initialD);
            window.cashiers.avail.push(initialD);
            //console.log("Customer Ended at: " + initialD + " Avail Cashiers: " + window.cashiers.avail);

          }, randomExponential(window.expParam.customerFinishRate) * 1000, this.dest);
        } else {
          loadCheckout();
        }
      }

      return;
    }
    let diff = time - window.fps.timing;
    this.lifeTime -= diff;
    this.x = this.sx + (this.destX - this.sx) * (1 - (this.lifeTime / (window.expParam.customerTravelTime * 1000)));
    this.y = this.sy + (this.destY - this.sy) * (1 - (this.lifeTime / (window.expParam.customerTravelTime * 1000)));
  }
}

function removeCust(c) {
  for (var i = 0; i < window.customers.list.length; i++) {
    if (window.customers.list[i].dest == c) {
      window.customers.list.splice(i, 1);
      return;
    }
  }
}

function loadCheckout() {
  shuffle(window.expParam.itemset);
  window.checkout.items = window.expParam.itemset.slice(0, window.expParam.items);
  let li = document.getElementById('sliderArea').children;
  let txt;

  for (var i = 0; i < li.length; i++) {
    document.getElementById('myRange' + i).value = 0;
    document.getElementById('myRangeLabel' + i).innerText = '$0.00'
    txt = "$" + window.checkout.items[i].price;
    if (txt.length == 4)
      txt += '0';
    else if (txt.length == 2)
      txt += '.00'
    li[i].children[0].innerText = window.checkout.items[i].name + ": " + txt;
  }

  document.getElementById("cartButton").style = "";
}

function checkCheckout() {
  let r = true;
  for (var i = 0; i < window.expParam.items; i++) {
    if (window.checkout.entered[i] != window.checkout.items[i].price) {
      r = false;
      break;
    }
  }
  if (r) {
    document.getElementById("cartButton").style = "background-color: #65e098;";
    window.checkout.done = true;
  } else {
    document.getElementById("cartButton").style = "";
    window.checkout.done = false;
  }
}

function checkoutOnclick() {
  if (!window.checkout.done)
    return;
  window.checkout.done = false;
  window.checkout.amount++;
  let d = new Date();
  if (window.practice && d - window.window.checkout.startTime > 60000) {
    window.checkout.practiceAmount++;
  }

  document.getElementById('pDisplay').innerText = window.checkout.amount;
  document.getElementById('bonusDisplay').innerText = (Math.floor(window.balloon.score / 10) + window.checkout.amount) * window.checkout.bonus;
  removeCust(window.cashiers.number);
  window.cashiers.avail.push(window.cashiers.number);
  let li = document.getElementById('sliderArea').children;
  for (var i = 0; i < li.length; i++) {
    document.getElementById('myRange' + i).value = 0;
    document.getElementById('myRangeLabel' + i).innerText = '$0.00';
    li[i].children[0].innerText = "No Item: $0.00";
  }

  document.getElementById("cartButton").style = "";
}

//updates each step of the animations
function update() {
  var canvas = document.getElementById('canvas');
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  var d = new Date();
  for (var i = 0; i < window.customers.list.length; i++) {
    window.customers.list[i].drawCust();
    window.customers.list[i].moveCust(d);
  }

  window.cQueue.drawQ();

  requestAnimationFrame(update);

  //calculate fps and makes timing adjustments
  d = new Date();
  if (window.fps.count > 10000)
    window.fps.count = 9000;
  if (d - window.fps.timing < 600) {
    window.fps.spd = ((window.fps.spd * window.fps.count) + (d - window.fps.timing)) / (window.fps.count + 1);
    window.fps.count++;
  }
  window.fps.timing = d;
  window.fps.fps = 1000 / window.fps.spd;
}

function startTrial() {
  let html = '';
  let v;

  if (window.practice) {


    window.cashiers = {};
    window.checkout = {};
    window.customers = {};
    window.balloon = {};

    window.checkout.time = window.expParam.practiceTime * 60000;
    window.cashiers.amount = window.expParam.practiceCashiers;
    window.cashiers.number = window.expParam.practiceCashierNumber;
    window.customers.ArrivalRate = window.expParam.practiceArrivalRate;
    window.checkout.practiceAmount = 0;

    //bonus randomization
    window.checkout.bonus = random(window.expParam.bonus);
    window.balloon.bonus = window.checkout.bonus;
    document.getElementById('bonusAmountDisplay').innerText = window.checkout.bonus;
  } else {
    window.checkout.time = window.expParam.expTime * 60000;
    window.cashiers.number = randomInt(0, window.cashiers.amount);
    window.customers.ArrivalRate = window.expParam.customerArrivalRate;
    document.getElementById('secondColumn').style = "";
  }

  window.cashiers.avail = [];
  window.customers.list = [];
  window.customerQueue = 0;
  window.balloon.state = false;
  window.balloon.score = 0;
  window.checkout.entered = [];
  window.checkout.done = false;
  window.checkout.startTime = new Date();
  window.checkout.amount = 0;
  window.checkout.ave = 0;


  for (var i = 0; i < window.cashiers.amount; i++) {
    window.cashiers.avail.push(i);
  }

  var canvas = document.getElementById('canvas');
  ctx = canvas.getContext('2d');
  canvas.height = 54 * window.cashiers.amount;
  canvas.width = window.expParam.customerWalkAreaWidth;

  for (var i = 0; i < window.expParam.items; i++) {
    html += '<div class="sliderContainer"><span class="sliderLabel">No Item ' + (i + 1) +': $0.00</span><strong><span class="rangeLabel" id="myRangeLabel' + i + '">$0.00</span></strong> <input type="range" min="0" max="8" value="0" step="0.05" data-id=' + i + ' class="slider" id="myRange' + i + '"></div>'
    window.checkout.entered.push(0);
  }
  document.getElementById("sliderArea").innerHTML = html;
  for (var i = 0; i < window.expParam.items; i++) {
    document.getElementById('myRange' + i).oninput = function() {
      let id = this.getAttribute('data-id');
      let txt = '$' + roundBetter(this.value, 2);
      if (txt.length == 4)
        txt += '0';
      else if (txt.length == 2)
        txt += '.00'
      document.getElementById('myRangeLabel' + id).innerText = txt;
      window.checkout.entered[id] = roundBetter(this.value, 2);
      checkCheckout();
    }
  }
  html = ''
  for (var i = 0; i < window.cashiers.amount; i++) {
    if (i == window.cashiers.number)
      html += '<tr><td><img src="./img/person1.png" width="50" height="50"></td><td>You</td></tr>'
    else
      html += '<tr><td><img src="./img/person2.png" width="50" height="50"></td><td>Cashier ' + (i + 1) + '</td></tr>'
  }
  document.getElementById("Cashiers").innerHTML = html;
  document.getElementById("cartButton").onclick = function() {
    checkoutOnclick();
  }

  window.fps = {
    timing: new Date(),
    count: 0,
    spd: 0,
    fps: 0
  };

  if (window.practice)
    window.cQueue = new cQueue();

  window.checkout.ave = roundBetter(window.customers.ArrivalRate * 60, 2);
  document.getElementById('AveDisplay').innerText = window.checkout.ave + " / min.";

  update();

  function addCustomersToQ() {
    setTimeout(function() {
      window.customerQueue += 1;
      addCustomersToQ();
    }, randomExponential(window.customers.ArrivalRate) * 1000);
  }
  addCustomersToQ();
  checkCQueue();
}

function checkCQueue() {

  let d = new Date();
  let diff = d - window.checkout.startTime;
  if (window.practice)
    window.checkout.time = window.expParam.practiceTime * 60000 - diff;
  else
    window.checkout.time = window.expParam.expTime * 60000 - diff;
  let m = Math.floor(window.checkout.time / 60000) + ":";
  let s = roundBetter((window.checkout.time % 60000) / 1000, 0);
  if (s < 10)
    s = "0" + s;
  document.getElementById('TimeDisplay').innerText = m + s;

  if (window.checkout.time <= 0) {
    window.cashiers.amount = random(window.expParam.cashiers);
    if (window.practice) {
      $.confirm({
        title: "Practice Completed",
        content: "The practice session is complete. The main session is about to begin. You will now be working in a group with <strong>" + window.cashiers.amount + "</strong> other computerized servers. As customers arrive to the checkout area, they join a single group line and then go to the next available server when their turn comes. You can only see the first customer waiting in line, as the rest of the line is hidden behind a wall. You will earn <strong>$" + window.checkout.bonus + "</strong> for each customer that you successfully process. Thus, if you complete 10 customers, you will earn $" + (window.checkout.bonus * 10) + ". <br><br>When there are no customers waiting in line, the balloon-popping game on the right-side of your screen starts, and you have the option to play this game to earn extra monetary reward if you want. This game is not mandatory. If you successfully click on (i.e., burst) 10 balloons, you will earn <strong>$" + window.balloon.bonus + "</strong> reward. Once a new customer comes for check-out, the balloon-popping game will stop, and you will not have the option to play the game. <br><br><strong>Reminder:</strong> the task will last for 15 minutes, and when it is over, you will be asked a few survey questions. You will be rewarded your payment upon completion of the main session and the short survey.",
        type: 'blue',
        boxWidth: '55%',
        useBootstrap: false,
        typeAnimated: true,
        buttons: {
          close: {
            text: "Continue",
            btnClass: 'btn-blue',
            action: function() {
              window.practice = false;
              window.expParam.customerFinishRate = roundBetter(window.checkout.practiceAmount / ((window.expParam.practiceTime - 1) * 60), 2);
              startTrial();
            }
          }
        }
      });
      return;
    } else {
      $.confirm({
        title: "Main Session Completed",
        content: "You have completed the main session. There will be a few survey questions after this.<br>Customers serviced: <strong>" + window.checkout.amount + "</strong><br>Balloons popped: <strong>" + window.balloon.score + "</strong><br>Total bonus earned: <strong>$" + ((Math.floor(window.balloon.score / 10) + window.checkout.amount) * window.checkout.bonus) + "</strong><br>",
        type: 'blue',
        boxWidth: '55%',
        useBootstrap: false,
        typeAnimated: true,
        buttons: {
          close: {
            text: "Continue",
            btnClass: 'btn-blue',
            action: function() {
              postQuestions(0);
            }
          }
        }
      });
      return;
    }
  }

  if (!window.practice && window.customerQueue == 0 && window.cashiers.avail.indexOf(window.cashiers.number) != -1) {
    balloonSpawn();
  }

  while (window.customerQueue > 0 && window.cashiers.avail.length > 0) {
    window.customerQueue--;
    let ind = window.cashiers.avail.indexOf(window.cashiers.number);
    if (ind == -1)
      ind = Math.floor(Math.random() * window.cashiers.avail.length);

    let d = window.cashiers.avail[ind];
    window.cashiers.avail.splice(ind, 1);
    newCust(d);
    //console.log("Customer Coming to: " + d + " Avail Cashiers: " + window.cashiers.avail);
  }
  setTimeout(function() {
    checkCQueue();
  }, 200);
}

//function to spawn balloon
function balloonSpawn() {
  if  (window.balloon.state)
    return;
  window.balloon.state = true;
  let bCon = document.getElementById('BalloonContainer');
  let time = roundBetter(8 + Math.random() * 6, 2);
  let left = roundBetter(50 + Math.random() * 40, 2);
  bCon.style = "animation: moveUp " + time + "s;left:" + left + "%;";
  let hue = Math.floor(Math.random() * 360);
  document.getElementById('Balloon').style = "filter: hue-rotate(" + hue + "deg);"
  window.balloon.timeout = setTimeout(function() {
    window.balloon.state = false;
    document.getElementById('BalloonContainer').style = "display: none;";
  }, time * 1000)
}

function balloonPop() {
  window.balloon.state = false;
  clearTimeout(window.balloon.timeout);
  document.getElementById('bonusDisplay').innerText = (Math.floor(window.balloon.score / 10) + window.checkout.amount) * window.checkout.bonus;
  document.getElementById('BalloonContainer').style = "display: none;";
  window.balloon.score += 1;
  document.getElementById('bDisplay').innerText = window.balloon.score;
}

//function to start experiment
function startExp() {
  console.log("Experiment Started");
  startTrial();
}


//start script
$(document).ready(function() {

  //check device type
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    console.log('Mobile');
    $.confirm({
      title: "Error",
      content: "Please do not use a mobile device for this experiment.",
      type: 'red',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        close: {
          text: "Close",
          btnClass: 'btn-blue',
          action: function() {
            return false;
          }
        }
      },
      onOpenBefore: function() {
        // before the modal is displayed.
        this.buttons.close.hide();
      },
    });
  } else { //not mobile

    //set up data collection object
    window.expData = {};
    window.expData.preQuestions = [];
    window.expData.postQuestions = [];
    window.fps = {};
    window.practice = true;

    //document.getElementById('BalloonContainer').style='display:none;'
    document.getElementById('Balloon').onclick = function() {
      balloonPop();
    }

    document.getElementById('secondColumn').style = "display:none;";


    preQuestions(0);
  }
});
